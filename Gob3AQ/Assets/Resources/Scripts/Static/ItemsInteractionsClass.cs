using UnityEngine;
using Gob3AQ.VARMAP.Types;
using Gob3AQ.VARMAP.Types.Items;
using System;

namespace Gob3AQ.Brain.ItemsInteraction
{
 
    public static class ItemsInteractionsClass
    {
        public static ReadOnlySpan<GamePickableItem> ITEM_TO_PICKABLE => _ItemToPickable;

        public static ReadOnlySpan<bool> IS_PICKABLE_DISPOSABLE => _PickableDisposable;


        private static readonly ItemInteractionInfo _InvalidInteraction =
            new ItemInteractionInfo(ItemInteractionType.INTERACTION_NONE, CharacterAnimation.ITEM_USE_ANIMATION_NONE,
                GameEvent.EVENT_NONE);


        private static readonly GamePickableItem[] _ItemToPickable = new GamePickableItem[(int)GameItem.ITEM_TOTAL]
        {
            /* > ATG 1 START < */
            GamePickableItem.ITEM_PICK_POTION,		/* ITEM_POTION */ 
            GamePickableItem.ITEM_PICK_POTION_BLUE,		/* ITEM_POTION_BLUE */ 
            GamePickableItem.ITEM_PICK_NONE,		/* ITEM_FOUNTAIN */ 
            /* > ATG 1 END < */
        };

        /// <summary>
        /// If pickable is disposed once it has been used
        /// </summary>
        private static bool[] _PickableDisposable = new bool[(int)GamePickableItem.ITEM_PICK_TOTAL]
        {
            /* > ATG 2 START < */
            true,		/* ITEM_PICK_POTION */ 
            true,		/* ITEM_PICK_POTION_BLUE */ 
            /* > ATG 2 END < */
        };

        /// <summary>
        /// Players with interms interaction matrix (Autogenerated)
        /// </summary>
        private static readonly ItemInteractionInfo[,] _PlayerWithItemIteraction =
            new ItemInteractionInfo[(int)CharacterType.CHARACTER_TOTAL, (int)GameItem.ITEM_TOTAL]
            {
                /* > ATG 3 START < */
                /* CHARACTER_MAIN */
                {
                	new(ItemInteractionType.INTERACTION_TAKE, CharacterAnimation.ITEM_USE_ANIMATION_TAKE,
                	GameEvent.EVENT_NONE),	/* ITEM_POTION */ 
                	new(ItemInteractionType.INTERACTION_NONE, CharacterAnimation.ITEM_USE_ANIMATION_NONE,
                	GameEvent.EVENT_NONE),	/* ITEM_POTION_BLUE */ 
                	new(ItemInteractionType.INTERACTION_NONE, CharacterAnimation.ITEM_USE_ANIMATION_NONE,
                	GameEvent.EVENT_NONE),	/* ITEM_FOUNTAIN */ 
                },
                /* CHARACTER_PARROT */
                {
                	new(ItemInteractionType.INTERACTION_NONE, CharacterAnimation.ITEM_USE_ANIMATION_NONE,
                	GameEvent.EVENT_NONE),	/* ITEM_POTION */ 
                	new(ItemInteractionType.INTERACTION_TAKE, CharacterAnimation.ITEM_USE_ANIMATION_TAKE,
                	GameEvent.EVENT_NONE),	/* ITEM_POTION_BLUE */ 
                	new(ItemInteractionType.INTERACTION_NONE, CharacterAnimation.ITEM_USE_ANIMATION_NONE,
                	GameEvent.EVENT_NONE),	/* ITEM_FOUNTAIN */ 
                },
                /* CHARACTER_SNAKE */
                {
                	new(ItemInteractionType.INTERACTION_NONE, CharacterAnimation.ITEM_USE_ANIMATION_NONE,
                	GameEvent.EVENT_NONE),	/* ITEM_POTION */ 
                	new(ItemInteractionType.INTERACTION_NONE, CharacterAnimation.ITEM_USE_ANIMATION_NONE,
                	GameEvent.EVENT_NONE),	/* ITEM_POTION_BLUE */ 
                	new(ItemInteractionType.INTERACTION_NONE, CharacterAnimation.ITEM_USE_ANIMATION_NONE,
                	GameEvent.EVENT_NONE),	/* ITEM_FOUNTAIN */ 
                },
                /* > ATG 3 END < */
            };

        private static readonly ItemInteractionInfo[,] _ItemWithItemIteraction =
            new ItemInteractionInfo[(int)GameItem.ITEM_TOTAL, (int)GameItem.ITEM_TOTAL]
            {
                /* > ATG 4 START < */
                /* ITEM_POTION */
                {
                	new(ItemInteractionType.INTERACTION_NONE, CharacterAnimation.ITEM_USE_ANIMATION_NONE,
                	GameEvent.EVENT_NONE),	/* ITEM_POTION */
                	new(ItemInteractionType.INTERACTION_NONE, CharacterAnimation.ITEM_USE_ANIMATION_NONE,
                	GameEvent.EVENT_NONE),	/* ITEM_POTION_BLUE */
                	new(ItemInteractionType.INTERACTION_USE, CharacterAnimation.ITEM_USE_ANIMATION_NORMAL,
                	GameEvent.EVENT_FOUNTAIN_FULL),	/* ITEM_FOUNTAIN */
                },
                /* ITEM_POTION_BLUE */
                {
                	new(ItemInteractionType.INTERACTION_NONE, CharacterAnimation.ITEM_USE_ANIMATION_NONE,
                	GameEvent.EVENT_NONE),	/* ITEM_POTION */
                	new(ItemInteractionType.INTERACTION_NONE, CharacterAnimation.ITEM_USE_ANIMATION_NONE,
                	GameEvent.EVENT_NONE),	/* ITEM_POTION_BLUE */
                	new(ItemInteractionType.INTERACTION_NONE, CharacterAnimation.ITEM_USE_ANIMATION_NONE,
                	GameEvent.EVENT_NONE),	/* ITEM_FOUNTAIN */
                },
                /* ITEM_FOUNTAIN */
                {
                	new(ItemInteractionType.INTERACTION_NONE, CharacterAnimation.ITEM_USE_ANIMATION_NONE,
                	GameEvent.EVENT_NONE),	/* ITEM_POTION */
                	new(ItemInteractionType.INTERACTION_NONE, CharacterAnimation.ITEM_USE_ANIMATION_NONE,
                	GameEvent.EVENT_NONE),	/* ITEM_POTION_BLUE */
                	new(ItemInteractionType.INTERACTION_NONE, CharacterAnimation.ITEM_USE_ANIMATION_NONE,
                	GameEvent.EVENT_NONE),	/* ITEM_FOUNTAIN */
                },
                /* > ATG 4 END < */
            };


        public static ref readonly ItemInteractionInfo GetItemInteraction(in ItemUsage usage)
        {
            ref readonly ItemInteractionInfo interaction = ref _InvalidInteraction;
            switch (usage.type)
            {
                case ItemUsageType.PLAYER_WITH_ITEM:
                    if ((usage.playerSource != CharacterType.CHARACTER_NONE)&&(usage.itemDest != GameItem.ITEM_NONE))
                    {
                        interaction = ref _PlayerWithItemIteraction[(int)usage.playerSource, (int)usage.itemDest];
                    }
                    break;

                case ItemUsageType.ITEM_WITH_ITEM:
                    if((usage.itemSource != GameItem.ITEM_NONE)&&(usage.itemDest != GameItem.ITEM_NONE))
                    {
                        interaction = ref _ItemWithItemIteraction[(int)usage.itemSource, (int)usage.itemDest];
                    }
                    break;
                case ItemUsageType.ITEM_WITH_PLAYER:
                    break;
                case ItemUsageType.ITEM_WITH_NPC:
                    break;
                default:
                    break; 
            }

            return ref interaction;
        }
    }
}
